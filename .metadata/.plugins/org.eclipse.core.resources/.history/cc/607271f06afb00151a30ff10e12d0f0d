package hu.elte;

import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;

public abstract class Signal <T> implements Runnable {

	T value;
	public static final Integer constantValue = 1;
	public static void generateConstantSignal(){
		Signal<Integer> asd = new Signal<Integer>(){

			@Override
			public void run() {
				while(true){
					Consumer<String> c = (x) -> System.out.print(this.value + "---------->");
					c.accept("Java2s.com");
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				
				
			}
			
		};
		asd.value=constantValue;
		new Thread(asd).start();
	}
	public void map( T value){
		this.value = value;
	}
	
	public T getValue() {
		return value;
	}
	public Signal<T> join (Signal<T> second, BiFunction<T, T, T> function){
		Signal<T> sum = new Signal<T>(){
			@Override
			public void run() {
				while(true){	
					this.value = function.apply(this.getValue(), second.getValue());
				}			
			}			
		};		
		return sum;
	}
	
}
